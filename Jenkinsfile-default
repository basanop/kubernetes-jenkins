node {

def app

stage('Clone repository') {

/* Let's make sure we have the repository cloned to our workspace */

checkout scm

}

stage('Build image') {

/* This builds the actual image; synonymous to

* docker build on the command line */

app = docker.build("capex/capexapi")

}

stage('Test image') {

/* Ideally, we would run a test framework against our image.

* For this example, we're using a Volkswagen-type approach ;-) */

app.inside {

sh 'echo "Tests passed"'

}

}

stage('Push image') {

/* Finally, we'll push the image with two tags:

* First, the incremental build number from Jenkins

* Second, the 'latest' tag.

* Pushing multiple tags is cheap, as all the layers are reused. */

docker.withRegistry('https://10.26.24.21:8083','nexus-id') {

app.push("${env.BUILD_NUMBER}")

app.push("latest")

}

}
stage('Remove Local Docker Images') {

            sh 'docker images -q | xargs --no-run-if-empty docker rmi --force'

      }
stage('Deploy in Docker Container') {

            sh 'sshpass -p \'Reliance#2018\' ssh root@10.26.24.10 "docker rm -f capex; docker image rm -f 10.26.24.21:8083/capex/capexapi:latest; docker run -d -t -p 8200:8200 --name capex 10.26.24.21:8083/capex/capexapi:latest;"' 

}


}
